<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:JukeBoxSolutions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="JukeBoxSolutions.App"
     xmlns:pages="clr-namespace:JukeBoxSolutions.Pages">
    <Application.Resources>
        <FontFamily x:Key="FutureBold">.Fonts/futur.ttf#Futura-Bold</FontFamily>
        <FontFamily x:Key="Regular">/JukeBoxSolutions;component/Fonts/#Futura LtCn BT</FontFamily>
        <FontFamily x:Key="Bold">/JukeBoxSolutions;component/Fonts/#Futura Hv BT</FontFamily>
        <sys:Int32 x:Key="TouchButtonHeight">75</sys:Int32>
        <SolidColorBrush x:Key="TrimColour" Color="#ffe7ecf0"/>
        <LinearGradientBrush x:Key="TrimColourGradient" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#ffa5d075" Offset="0"/>
            <GradientStop Color="#ff679c4c" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TrimColourDark" Color="#ff0f1420"/>

        <SolidColorBrush x:Key="PrimaryColour" Color="#ffe7ecf0"/>
        <SolidColorBrush x:Key="PrimaryColourDark" Color="#FFdce5ec"/>


        <SolidColorBrush x:Key="SecondaryColour" Color="#ffe7ecf0"/>
        <SolidColorBrush x:Key="SecondaryColourDark" Color="#ffe7ecf0"/>



        <SolidColorBrush x:Key="ControlColourHighlight" Color="#FF4362F3"/>
        <SolidColorBrush x:Key="ControlColourHighlightDark" Color="#FF4353E7"/>


        <SolidColorBrush x:Key="ControlColour" Color="#ff455288"/>
        <SolidColorBrush x:Key="ControlColourDark" Color="#ff323d5d"/>

        <LinearGradientBrush x:Key="ControlGradientMain" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF455288" Offset="0"/>
            <GradientStop Color="#FF212942" Offset="1"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ControlGradientMainHighlight" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF4062f2" Offset="0"/>
            <GradientStop Color="#FF1e6dfd" Offset="1"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ControlGradientMain_Red" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FFA03131" Offset="0"/>
            <GradientStop Color="#FF471212" Offset="1"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ControlGradientMainHighlight_Red" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FFF24040" Offset="0"/>
            <GradientStop Color="#FFFD1E1E" Offset="1"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ControlGradientMain_Green" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF208B25" Offset="0"/>
            <GradientStop Color="#FF214223" Offset="1"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ControlGradientMainHighlight_Green" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF58F240" Offset="0"/>
            <GradientStop Color="#FF14AE14" Offset="1"/>
        </LinearGradientBrush>



        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <ControlTemplate.Resources>
                            <!--<Storyboard x:Key="OnMouseEnter1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="glassCube">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.9"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="glassCube">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.9"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>-->
                            <Storyboard x:Key="OnClick1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="glassCube">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="360"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Grid>
                            <!--<Rectangle x:Name="outerRectangle" RadiusY="25" RadiusX="25" Stroke="{TemplateBinding Background}" Fill="{x:Null}" StrokeThickness="0"/>-->
                            <!--<Rectangle x:Name="innerRectangle" Fill="{TemplateBinding Background}" HorizontalAlignment="Left" Height="80" RadiusY="15" RadiusX="15" Stroke="{x:Null}" StrokeThickness="0" VerticalAlignment="Top" Width="180" Margin="10,10,0,0"/>-->
                            <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle x:Name="glassCube" RadiusY="25" RadiusX="25" StrokeThickness="5" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#BFFFFFFF" Offset="0"/>
                                        <GradientStop Offset="1"/>
                                        <GradientStop Offset="0.172"/>
                                        <GradientStop Color="#BFFFFFFF" Offset="0.314"/>
                                        <GradientStop Offset="0.519"/>
                                        <GradientStop Color="#BFFFFFFF" Offset="0.745"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <!--<ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Opacity" TargetName="glassCube" Value="1"/>
                            </Trigger>
                            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                <BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="ButtonBase.Click">
                                <BeginStoryboard x:Name="OnClick1_BeginStoryboard" Storyboard="{StaticResource OnClick1}"/>
                            </EventTrigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Stroke" TargetName="outerRectangle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Opacity" TargetName="glassCube" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="outerRectangle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>-->
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle2" TargetType="{x:Type Button}">
            <Setter Property="Background" >
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FF4859A0" Offset="0"/>
                        <GradientStop Color="#FF212942" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="FontFamily" Value="Quicksand Bold" />
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Padding" Value="15,0,15,8"/>
            <Setter Property="MinWidth" Value="152"/>
            <Setter Property="Height" Value="107"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <!--<ControlTemplate.Resources>
                            <Storyboard x:Key="Storyboard1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="rectangle">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.839"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.125"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0.858"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="-0.75"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>-->
                        <Grid>
                            <!--<Rectangle x:Name="rectangle" RenderTransformOrigin="0.5,0.5" Fill="{TemplateBinding Background}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>-->
                            <!--<Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/ButtonM_Overlay.png"/>
                                </Rectangle.Fill>
                            </Rectangle>-->
                            <Button Content="Button" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75">
                            </Button>
                            <Label x:Name="label" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Margin="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Label>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Images/Menu1/Menu1KaraokeT.png"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FolderButtonStyle2" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="60"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="FontFamily" Value="Quicksand Bold"/>
            <Setter Property="Foreground" Value="#000"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="5">
                            <Grid Margin="0,10,0,0" Background="#fff">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="60"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <!--<Rectangle Grid.Column="0" Grid.ColumnSpan="3" Fill="#FF9DB7F7" Stroke="{x:Null}" RadiusX="16" RadiusY="16" Margin="0,0,0,0" />
                            <Rectangle Grid.Column="0" Grid.ColumnSpan="3" Fill="#FFE7ECF0" Stroke="{x:Null}" RadiusX="16" RadiusY="16" Margin="0,0,0,3" />-->
                                <Image Source="Images/Theme1/folderIc.png" Width="24" Height="24"/>
                                <Label FontFamily="{TemplateBinding FontFamily}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="#000" FontSize="{TemplateBinding FontSize}" Margin="0,0,0,0">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Label>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="LargeDiamondButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="146"/>
            <Setter Property="Width" Value="146"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">

                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="HighlightRectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.75"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </VisualState>
                                    <VisualState x:Name="Pressed">

                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="HighlightRectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.75"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <Rectangle Fill="{DynamicResource TrimColourGradient}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1LargeDiamondButtonMask3.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Fill="{DynamicResource TrimColourDark}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1LargeDiamondButtonMask2.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" Fill="{DynamicResource ControlGradientMain}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1LargeDiamondButtonMask1.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle x:Name="HighlightRectangle" Fill="{DynamicResource ControlGradientMainHighlight}" Opacity="0">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1LargeDiamondButtonMask1.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="PlayButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Width" Value="146"/>
            <Setter Property="Height" Value="146"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle>
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/Style1PlayButton.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SmallDiamondButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="108"/>
            <Setter Property="Width" Value="108"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="HighlightRectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.75"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="HighlightRectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.75"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">

                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle>
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButton.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle1" Fill="{DynamicResource TrimColourGradient}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask3.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Fill="{DynamicResource TrimColourDark}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask2.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" Fill="{DynamicResource  ControlGradientMain}" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask1.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle x:Name="HighlightRectangle" Fill="{DynamicResource  ControlGradientMainHighlight}" Opacity="0" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask1.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SmallDiamondToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
            <Setter Property="Height" Value="108"/>
            <Setter Property="Width" Value="108"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid x:Name="grid">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">

                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.75"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </VisualState>
                                    <VisualState x:Name="Pressed">

                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.75"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill)" Storyboard.TargetName="HighLightRectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlGradientMainHighlight}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill)" Storyboard.TargetName="rectangle2">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlGradientMain}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle>
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButton.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle1" Fill="{DynamicResource TrimColourGradient}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask3.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="rectangle2" Fill="{DynamicResource TrimColourDark}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask2.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="HighLightRectangle" Fill="{DynamicResource ControlGradientMain}">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask1.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle x:Name="rectangle" Fill="{DynamicResource ControlGradientMainHighlight}" Opacity="0">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Style1SmallDiamondButtonMask1.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToggleButtonStyle2" TargetType="{x:Type ToggleButton}">
            <Setter Property="FontFamily" Value="Quicksand Bold" />
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Padding" Value="15,0,15,0"/>
            <Setter Property="MinWidth" Value="152"/>
            <Setter Property="MinHeight" Value="107"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="92*"/>
                                <RowDefinition Height="8*"/>
                            </Grid.RowDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="rectangleGlow" Grid.RowSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/ButtonM_Glow.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" Grid.RowSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/ButtonM_Shadow.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Label Grid.Row="0" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" >
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Label>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleAlpha" TargetType="{x:Type Button}">
            <Setter Property="FontFamily" Value="Quicksand Bold" />
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Padding" Value="15,0,15,0"/>
            <Setter Property="MinWidth" Value="152"/>
            <Setter Property="Height" Value="107"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="{DynamicResource ControlGradientMain}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="132*"/>
                                <RowDefinition Height="10*"/>
                            </Grid.RowDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="HighLight">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="HighLight">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle1">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="label">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FFB8B8B8"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="BaseColour" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Fill="{TemplateBinding Background}" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="HighLight" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Fill="{TemplateBinding BorderBrush}" Opacity="0.5" Visibility="Collapsed" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="rectangle1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Visibility="Collapsed">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF7C7C7C" Offset="0"/>
                                        <GradientStop Color="#FF5B5B5B" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Label x:Name="label" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" Margin="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Label>
                            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Overlay.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleButtonStyleAlpha" TargetType="{x:Type ToggleButton}">
            <Setter Property="FontFamily" Value="Quicksand Bold" />
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Padding" Value="15,0,15,0"/>
            <Setter Property="MinWidth" Value="152"/>
            <Setter Property="Height" Value="107"/>
            <Setter Property="Background" Value="{DynamicResource ControlGradientMain}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource ControlGradientMainHighlight}"/>
            <Setter Property="Background" Value="{DynamicResource ControlGradientMain}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource ControlGradientMainHighlight}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="132*"/>
                                <RowDefinition Height="10*"/>
                            </Grid.RowDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Greyout">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="label">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FFA0A0A0"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="HighlightColour">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="BaseColour" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Fill="{TemplateBinding Background}" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="HighlightColour" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Fill="{TemplateBinding BorderBrush}" Visibility="Collapsed" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle x:Name="Greyout" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Visibility="Collapsed">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF7C7C7C" Offset="0"/>
                                        <GradientStop Color="#FF5B5B5B" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Fill="{TemplateBinding BorderBrush}" Visibility="Collapsed" Opacity="0.5" >
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Mask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Label x:Name="label" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" Margin="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Label>
                            <Rectangle x:Name="OverlayMask" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls\Style1\ButtonM_Overlay.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FileListingStyleAlpha" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="65"/>
            <Setter Property="FontFamily" Value="Quicksands Bold"/>
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Height" Value="65"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="113"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="30"/>
                            </Grid.ColumnDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed"/>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle Grid.Column="0" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/Listing_left.png" Stretch="None"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/Listing_cent.png" TileMode="FlipX" Stretch="None" ViewportUnits="Absolute" Viewport="0,0,5,65"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Label Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,-10,0,0" Foreground="#FF585858">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Label>
                            <Rectangle Grid.Column="2" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/Listing_right.png" Stretch="None"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" Grid.ColumnSpan="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="{DynamicResource ControlGradientMainHighlight}" RadiusX="10" RadiusY="10" Margin="20,3,20,10" Opacity="0.5" Visibility="Collapsed" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FileListingToggleStyleAlpha" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="60"/>
            <Setter Property="FontFamily" Value="Quicksands Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="5">
                            <Grid Background="{TemplateBinding Background}">
                                <!--<VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle2">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="label">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FFBDBDBD"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle1">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="label">
                                                <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>-->
                                <!--<Rectangle Grid.Column="0" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/Listing_left.png" Stretch="None"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/Listing_cent.png" TileMode="FlipX" Stretch="None" ViewportUnits="Absolute" Viewport="0,0,5,65"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle Grid.Column="2" >
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/Listing_right.png" Stretch="None"/>
                                </Rectangle.Fill>
                            </Rectangle>-->
                                <!--<Rectangle x:Name="rectangle1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="{TemplateBinding Background}" RadiusX="10" RadiusY="10" Margin="20,3,20,10" Opacity="0.6" Visibility="Collapsed" />-->
                                <!--<Rectangle x:Name="rectangle2" Grid.ColumnSpan="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" RadiusX="8" RadiusY="8" Margin="20,3,20,10" Opacity="0.75" Visibility="Collapsed" >
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="#99000000" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>-->
                                <Label FontFamily="{TemplateBinding FontFamily}" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Margin="0,0,0,0">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Label>
                                <!--<Rectangle x:Name="rectangle" Grid.ColumnSpan="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="{TemplateBinding BorderBrush}" RadiusX="10" RadiusY="10" Margin="20,3,20,10" Opacity="0.5" Visibility="Collapsed" />-->
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="NextButtonStyleAlpha" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="164"/>
            <Setter Property="Width" Value="164"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle1">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="rectangle1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/ButtonNext.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource PrimaryColour}" Opacity="0.75" Visibility="Collapsed">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="/JukeBoxSolutions;component/Controls/Style1/ButtonNext_Mask.png"/>
                                </Rectangle.OpacityMask>

                            </Rectangle>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TrackItemButtonStyleAlpha" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="113" />
                                <ColumnDefinition/>
                                <ColumnDefinition Width="35" />
                            </Grid.ColumnDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle1">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle2">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle1">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle2">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle1">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle2">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle Grid.Column="0" Width="113" Height="70" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/Listing_left.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle" Grid.Column="0" Width="113" Height="70" HorizontalAlignment="Left" VerticalAlignment="Top" Fill="{DynamicResource ControlGradientMainHighlight}" Visibility="Hidden">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Listing_left_highlightmask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Grid.Column="1">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/Listing_cent.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle1" Grid.Column="1" Fill="{DynamicResource ControlGradientMainHighlight}" Visibility="Hidden">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Listing_cent_highlightmask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Grid.Column="2" Width="35" Height="70" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="Controls/Style1/Listing_right.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rectangle2" Grid.Column="2" Width="35" Height="70" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5" Fill="{DynamicResource ControlGradientMainHighlight}" Visibility="Hidden">
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="Controls/Style1/Listing_right_highlightmask.png"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>

                            <ContentPresenter Grid.ColumnSpan="3" Margin="0,0,0,10" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--<Style TargetType="Window" >
            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush Stretch="Fill" ImageSource="Images/Theme1/main_background.png" AlignmentY="Top" AlignmentX="Center"/>
                </Setter.Value>
            </Setter>
        </Style>-->
        <Style TargetType="{x:Type local:MainWindow}" BasedOn="{StaticResource {x:Type Window}}"/>
        <Style x:Key="SomeButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SomeButtonStyleWithRadius" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="20">
                            <Grid>
                                <ContentPresenter Content="{TemplateBinding Content}"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SomeToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SliderRepeatButton" TargetType="RepeatButton">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border  BorderThickness="1" BorderBrush="#ffffff" Background="#ffffff" Height="3"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderRepeatButton1" TargetType="RepeatButton">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border SnapsToDevicePixels="True" Background="#D481CF"  BorderThickness="1" BorderBrush="#D481CF" Height="3"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderThumb" TargetType="Thumb">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                        <Ellipse Height="15" Width="15" Fill="#ffffff"></Ellipse>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="Slider"  TargetType="Slider">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Track Grid.Row="1" x:Name="PART_Track"   >
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderRepeatButton1}"  Command="Slider.DecreaseLarge" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource SliderThumb}"  />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderRepeatButton}" Command="Slider.IncreaseLarge" />
                    </Track.IncreaseRepeatButton>
                </Track>
            </Grid>
        </ControlTemplate>
        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="TextElement.Foreground" Value="White"/>
            <Setter Property="TextElement.FontWeight" Value="SemiBold"/>
        </Style>
        <Style x:Key="Horizontal_Slider" TargetType="Slider">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="MinHeight" Value="21" />
                    <Setter Property="MinWidth" Value="104" />
                    <Setter Property="Template" Value="{StaticResource Slider}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--<Style x:Key="RoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid x:Name="grid">
                            <Border x:Name="border" CornerRadius="28" Background="#000" Opacity="0.71" BorderThickness="1" Padding="2">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>                        
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#fff"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#000"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
        <Style x:Key="RoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="28">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="NormalButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="Opacity" Value="0.71"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="28">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CircleButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#56B1C6"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="28">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="LeftCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5,0,0,5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="LeftRoundCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="25,0,0,25">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RightRoundCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0,25,25,0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ZeroCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="AllCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RightCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0,5,5,0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="NoToggleRightCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#fff"/>
            <Setter Property="TextElement.Foreground" Value="#000"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0,5,5,0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ImportAuditToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="10">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RoundedToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="28">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BigRoundedToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="30">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="InitialPathButtonStyle">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="60"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="#000" CornerRadius="20,6,6,20">
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Button" x:Key="FolderPathButtonStyle" BasedOn="{StaticResource SomeButtonStyle}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="6">
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid x:Name="Grid">
                            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                            <Border x:Name="Rectangle1" CornerRadius="9" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"  Background="{TemplateBinding Background}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag" Value="Horizontal">
                                <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                                <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--SCROLLBARS-->
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
            <Setter Property="Foreground" Value="LightGray" />
            <Setter Property="Background" Value="#000" />
            <Setter Property="Width" Value="10" />
            <Setter Property="Margin" Value="0,60,0,70"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Border Background="#000" CornerRadius="12">
                            <Grid x:Name="GridRoot" Width="12" Background="Transparent">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.00001*" />
                                </Grid.RowDefinitions>

                                <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                    <Track.Thumb>
                                        <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                    </Track.DecreaseRepeatButton>
                                </Track>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                            </Trigger>
                            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width" Value="Auto" />
                                <Setter Property="Height" Value="12" />
                                <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}" x:Name="SearchButtonStyle">
            <Setter Property="Height" Value="46"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="Background" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="23">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ToggleButton" x:Key="AlbumButtonStyle">
            <Setter Property="Background" Value="#56B1C6"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="#56B1C6" CornerRadius="6,20,20,6" BorderThickness="0">
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ToggleButton" x:Key="AlbumButtonStyleV1">
            <Setter Property="Background" Value="#56B1C6"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="#56B1C6" CornerRadius="6" BorderThickness="0">
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Button" x:Key="RoundButtonStyleV1">
            <Setter Property="Background" Value="#fff"/>
            <Setter Property="Foreground" Value="#225663"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="#fff" CornerRadius="15" BorderThickness="2" BorderBrush="#225663">
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ToggleButton" x:Key="DisabledToggleButtonStyle">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="40"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Opacity" Value="0.5"/>
            <Setter Property="Margin" Value="0,0,5,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="6" Opacity="0.7">
                            <Grid>
                                <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ToggleButton" x:Key="EnabledToggleButtonStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="40"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Margin" Value="0,0,5,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="6">
                            <Grid>
                                <Image Source="Images/Theme1/Keybg.png"/>
                                <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="NoToggleLeftCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#fff"/>
            <Setter Property="TextElement.Foreground" Value="#000"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5,0,0,5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RightCircleCornerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="Height" Value="46"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0,23,23,0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Background" Value="#000"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="BigRoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#000"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="30">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#fff"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RightRoundedSearchButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#56B1C6"/>
            <Setter Property="TextElement.Foreground" Value="#fff"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0,6,6,0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#56B1C6"/>
                    <Setter Property="Opacity" Value="1"/>
                    <Setter Property="TextElement.Foreground" Value="#fff"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Button" x:Key="KeyboardButtonStyle">
            <Setter Property="Background" Value="#353A3C"/>
            <Setter Property="Foreground" Value="#fff"/>
            <Setter Property="Height" Value="46"/>
            <Setter Property="Width" Value="46"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Margin" Value="0,0,5,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="6">
                            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
